; Project2.asm - This program inputs two values, and allows the user to perform arithmetic operations between them.
;The input and output radices can be set to be different.

.386
.model flat,stdcall
.stack 4096
ExitProcess proto,dwExitCode:dword

Include irvine32.inc

.data
valueA dword ?
valueB dword ?
addValue dword ?
subvalue dword ?
mulvalue dword ?
divvalue dword ?
remvalue dword ?

askRadixOut db 'Enter the radix you would like to output in: ', 13,10,0
addText db 0ah,0dh,'A + B = ',0
subText db 13,10,'A - B = ' ,0
mulText db 13,10,'A * B = ' ,0
divText db 13,10,'A / B = ' ,0
output1 db ' and ',0
output2 db 'in radix ',0

.code
	main proc

	call readnum
	mov valueA, eax
	call readnum
	mov valueB, eax

	add eax, valueA
	mov addvalue, eax

	mov eax, valueA
	mov ebx, valueB

	sub eax, ebx
	mov subvalue, eax

	mov eax, valueA
	mul ebx
	mov mulvalue, eax

	mov eax, valueB
	mov ebx, valueA
	div ebx
	mov divvalue, eax
	mov remvalue, edx

Not_Valid:

	xor ebx, ebx
	mov edx, offset askRadixOut
	call writeString
	call readChar
	call writeChar

	cmp al, 30h
	jl Not_Valid
	cmp al, 39h
	jg LetterMain
	sub al, 30h
	jmp PrintValues

LetterMain:

	cmp al, 41h
	jl Not_Valid
	cmp al, 5Ah
	jg LowerLetterMain
	sub al, 29
	jmp PrintValues

LowerLetterMain:

	cmp al, 61h
	jl Not_Valid
	cmp al, 7ah
	jg Not_Valid
	sub al, 87

PrintValues:

	mov bl, al
	
	mov edx, offset addText
	call writeString
	mov eax, addvalue
	call convertDec
	lea edx, output1
	call writestring
	call printNumRadix
	lea edx, output2


	mov edx, offset subText
	call writeString
	mov eax, subvalue
	call printNumRadix

	mov edx, offset mulText
	call writeString
	mov eax, mulvalue
	call printNumRadix

	mov edx, offset divText
	call writeString
	mov eax, divvalue
	call printNumRadix
	mov al, 32
	call writeChar
	mov al, 82
	call writeChar
	mov al, 32
	call writeChar
	mov eax, remvalue
	call printNumRadix


	
	INVOKE ExitProcess, 0

main endp


convertDec PROC

		.data
		variableThatHoldsAx dw ?

		.code
		
		MOV variableThatHoldsAx, ax
		xor eax, eax
		LEA esi, variableThatHoldsAx
		loop_cd:
		MOV dx, 48d
		ADD [esi], dx

		MOV al, [esi]
		call writechar
		INC esi
		
		MOV edx, valueA
		call find_length
		CMP [esi], cx
		JNE loop_cd

		ret
		convertDec endp









;----------------------------------------------------------------------------------------------------------------------------------------------
;ReadNum
;Receives: 
;Reads a number in any radix and converts the number into an int and returns it to EAX
;----------------------------------------------------------------------------------------------------------------------------------------------

ReadNum PROC

.data

	number db 33 dup(0);

	askRadix db 'Input Radix (2-9, a-z, A-Z for 2-62): ', 0
	newLine db 13,10,0
	askNum db 'Input number, press enter once done', 13,10,0
	oopsie db ' is larger than radix so that number doesnt make sense its like saying g11 hex, try again but be better', 13,10,0

.code

Start_Over:

	;Get input for radix and number
	mov edx, offset askRadix
	call writestring
	call readchar
	call writechar
	xor ebx, ebx
	mov bl, al


	cmp bl, 57
	jg Radix_Letter
	cmp bl, 48
	jl Start_Over
	sub bl, '0'
	jmp Ready_Read
Radix_Letter:
	cmp bl, 90
	jg Radix_Lowercase
	cmp bl, 65
	jl Start_Over
	sub bl, 29
Radix_Lowercase:
	cmp bl, 122
	jg Error
	cmp bl, 97
	jl Error
	sub bl, 87

Ready_Read:

	cmp bl, 2
	jl Start_Over
	mov edx, offset newLine
	call writestring
	mov edx, offset askNum
	call writestring

Check_Sign:

	mov ecx, 32
	mov esi, offset number
	call readchar
	call writechar
	cmp al, 45
	je Set_Negitive
	mov dx, 0
	push dx
	cmp al, 10
	jle Turned_To_Num
	jmp Fix_Num_Val
	xor eax, eax

Set_Negitive:

	mov dx, 1
	push dx

Read_Loop:
	
	call readchar
	call writechar
	cmp al, 13
	je Turn_To_Int
	jmp Fix_Num_Val

Turned_To_Num:

	cmp al, bl
	jge Error
	mov [esi], al
	inc esi
	jcxz Turn_To_Int
	dec cx
	jmp Read_Loop

Fix_Num_Val:

		cmp al, 57
		jg Letter
		cmp al, 48
		jl Error
		sub al, '0'
		jmp Turned_To_Num

	Letter:

		cmp al, 90
		jg Lowercase
		cmp al, 65
		jl Error
		sub al, 29
		jmp Turned_To_Num

	Lowercase:

		cmp al, 122
		jg Error
		cmp al, 97
		jl Error
		sub al, 87
		jmp Turned_To_Num

Error:

	mov edx, offset newLine
	call writestring
	call writechar
	mov edx, offset oopsie
	call writestring
	jmp Check_Sign


	;Convert the array to a regular int

Turn_To_Int:

	mov al, 0
	mov [esi], al
	dec esi
	mov dx, cx
	mov cx, 32
	sub cx, dx
	mov eax, 1
	xor edx, edx

Loop_Thru_Num_Arr:
	
	push eax
	push ebx
	mov bl, [esi]
	mul bl
	dec esi
	add edx, eax
	pop ebx
	pop eax
	jcxz Done
	push edx
	mul bl
	pop edx
	dec cx
	jmp Loop_Thru_Num_Arr


Done:
	
	mov eax, edx
	pop dx
	cmp dx, 0
	je Positive
	neg eax

Positive:
	
	ret

ReadNum ENDP

;----------------------------------------------------------------------------------------------------------------------------------------------
;PrintNumRadix
;Receives:
;EAX: Value to print
;BL: Radix to print in
;Converts an int into a string representing a number in any radix, then prints the number
;----------------------------------------------------------------------------------------------------------------------------------------------

PrintNumRadix PROC

.data
	numString db 33 dup(0);
.code
	
	mov esi, offset numString
	mov ecx, 32

Div_Loop:

	cmp eax, ebx
	jg Do_The_Div
	mov dx, ax
	mov ax, 0
	jmp Skip_The_Div

Do_The_Div:

	div bx

Skip_The_Div:

	cmp dx, 9
	jg Letter_Print
	add dx, 30h
	jmp Add_To_Arr

Letter_Print:

	cmp dx, 36
	jg Upper_Letter_Print
	add dx, 87
	jmp Add_To_Arr

Upper_Letter_Print:

	add dx, 29

Add_To_Arr:

	mov [esi], dl
	dec cx
	jcxz Done_With_Div_Loop
	cmp ax, 0
	je Done_With_Div_Loop
	inc esi
	jmp Div_Loop

Done_With_Div_Loop:

	mov bx, cx
	mov cx, 32
	sub cx, bx

Print_Num:

	jcxz Print_Done
	mov al, [esi]
	call writeChar
	dec esi
	jmp Print_Num

Print_Done:

	ret
PrintNumRadix ENDP

Find_length:
		
	division_loop1:  ;divides repeatedly by the radix and counts how many times it does it, using the counter as the number of bits the number will need
	inc cx
	DIV bx
	cmp ax, 1
	jle division_done1
	jmp division_loop1
	division_done1:		
	ret

end main

